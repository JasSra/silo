// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Silo.Core.Data;

#nullable disable

namespace Silo.Api.Data.Migrations
{
    [DbContext(typeof(SiloDbContext))]
    partial class SiloDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Silo.Core.Models.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Resource")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Resource", "Action")
                        .IsUnique();

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fe587224-e86f-478e-8749-79312d2f30f2"),
                            Action = "read",
                            CreatedAt = new DateTime(2025, 10, 8, 12, 12, 25, 788, DateTimeKind.Utc).AddTicks(8780),
                            Description = "Read files",
                            Name = "files:read",
                            Resource = "files"
                        },
                        new
                        {
                            Id = new Guid("38545651-61a9-4477-ae95-11625413f48f"),
                            Action = "write",
                            CreatedAt = new DateTime(2025, 10, 8, 12, 12, 25, 788, DateTimeKind.Utc).AddTicks(8800),
                            Description = "Write files",
                            Name = "files:write",
                            Resource = "files"
                        },
                        new
                        {
                            Id = new Guid("ac20f746-ad58-46f1-8f72-539f827bf4d5"),
                            Action = "delete",
                            CreatedAt = new DateTime(2025, 10, 8, 12, 12, 25, 788, DateTimeKind.Utc).AddTicks(8818),
                            Description = "Delete files",
                            Name = "files:delete",
                            Resource = "files"
                        },
                        new
                        {
                            Id = new Guid("27acd356-32b7-478f-a654-9c2fc7147fad"),
                            Action = "upload",
                            CreatedAt = new DateTime(2025, 10, 8, 12, 12, 25, 788, DateTimeKind.Utc).AddTicks(8836),
                            Description = "Upload files",
                            Name = "files:upload",
                            Resource = "files"
                        },
                        new
                        {
                            Id = new Guid("f00a2128-53b3-4e27-95b9-a0ba7c0608c1"),
                            Action = "download",
                            CreatedAt = new DateTime(2025, 10, 8, 12, 12, 25, 788, DateTimeKind.Utc).AddTicks(8855),
                            Description = "Download files",
                            Name = "files:download",
                            Resource = "files"
                        },
                        new
                        {
                            Id = new Guid("d1633467-da0e-4dc4-8337-60dcdbb63c02"),
                            Action = "read",
                            CreatedAt = new DateTime(2025, 10, 8, 12, 12, 25, 788, DateTimeKind.Utc).AddTicks(8871),
                            Description = "Read users",
                            Name = "users:read",
                            Resource = "users"
                        },
                        new
                        {
                            Id = new Guid("1cfa0080-7678-4d5b-98af-3bd905bc66de"),
                            Action = "write",
                            CreatedAt = new DateTime(2025, 10, 8, 12, 12, 25, 788, DateTimeKind.Utc).AddTicks(8890),
                            Description = "Write users",
                            Name = "users:write",
                            Resource = "users"
                        },
                        new
                        {
                            Id = new Guid("5d53865a-bd11-49f4-badf-b50da6607bfd"),
                            Action = "manage",
                            CreatedAt = new DateTime(2025, 10, 8, 12, 12, 25, 788, DateTimeKind.Utc).AddTicks(8909),
                            Description = "Manage users",
                            Name = "users:manage",
                            Resource = "users"
                        },
                        new
                        {
                            Id = new Guid("c37f4066-3722-407c-8ced-2b5bff7d64c4"),
                            Action = "admin",
                            CreatedAt = new DateTime(2025, 10, 8, 12, 12, 25, 788, DateTimeKind.Utc).AddTicks(8926),
                            Description = "System administration",
                            Name = "system:admin",
                            Resource = "system"
                        });
                });

            modelBuilder.Entity("Silo.Core.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            CreatedAt = new DateTime(2025, 10, 8, 12, 12, 25, 788, DateTimeKind.Utc).AddTicks(8722),
                            Description = "Full system access",
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            CreatedAt = new DateTime(2025, 10, 8, 12, 12, 25, 788, DateTimeKind.Utc).AddTicks(8735),
                            Description = "Standard user access",
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            CreatedAt = new DateTime(2025, 10, 8, 12, 12, 25, 788, DateTimeKind.Utc).AddTicks(8746),
                            Description = "File management access",
                            Name = "FileManager"
                        });
                });

            modelBuilder.Entity("Silo.Core.Models.RolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("GrantedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("GrantedBy")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("Silo.Core.Models.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomDomain")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.Property<int>("MaxApiKeys")
                        .HasColumnType("integer");

                    b.Property<int>("MaxUsers")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Settings")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<long>("StorageQuotaBytes")
                        .HasColumnType("bigint");

                    b.Property<long>("StorageUsedBytes")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("SubscriptionExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SubscriptionTier")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Tenants");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2025, 10, 8, 12, 12, 25, 788, DateTimeKind.Utc).AddTicks(8476),
                            Description = "System tenant for administrative purposes",
                            IsActive = true,
                            MaxApiKeys = 2147483647,
                            MaxUsers = 2147483647,
                            Name = "System",
                            Settings = "{}",
                            Slug = "system",
                            StorageQuotaBytes = 9223372036854775807L,
                            StorageUsedBytes = 0L,
                            SubscriptionTier = "Enterprise"
                        });
                });

            modelBuilder.Entity("Silo.Core.Models.TenantApiKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("KeyHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("KeyPrefix")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Scopes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("KeyHash")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.ToTable("TenantApiKeys");
                });

            modelBuilder.Entity("Silo.Core.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("LockedOutUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Silo.Core.Models.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("AssignedBy")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Silo.Core.Models.UserSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RefreshToken")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("Silo.Core.Models.RolePermission", b =>
                {
                    b.HasOne("Silo.Core.Models.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silo.Core.Models.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Silo.Core.Models.TenantApiKey", b =>
                {
                    b.HasOne("Silo.Core.Models.Tenant", "Tenant")
                        .WithMany("ApiKeys")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Silo.Core.Models.User", b =>
                {
                    b.HasOne("Silo.Core.Models.Tenant", "Tenant")
                        .WithMany("Users")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Silo.Core.Models.UserRole", b =>
                {
                    b.HasOne("Silo.Core.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silo.Core.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Silo.Core.Models.UserSession", b =>
                {
                    b.HasOne("Silo.Core.Models.User", "User")
                        .WithMany("UserSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Silo.Core.Models.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Silo.Core.Models.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Silo.Core.Models.Tenant", b =>
                {
                    b.Navigation("ApiKeys");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Silo.Core.Models.User", b =>
                {
                    b.Navigation("UserRoles");

                    b.Navigation("UserSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
